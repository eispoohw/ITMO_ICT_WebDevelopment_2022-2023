{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IFMO WebDevelopment Course Results of Laboratory Works in the Web Development Course at IFMO University. Author: Kormanovskaya Darina , K33401 Labs 1. Working with sockets | \ud83d\udcda Purpose of work : to master the practical skills and abilities to implement web-servers and the use of sockets. Stack : Python libs socket , threading 2. Django | \ud83d\udcda Purpose of work : to get a brief introduction to the workings of the Django web framework. Stack : Django 3. Django REST | \ud83d\udcda Purpose of work : to acquire practical skills in implementing the server side (backend) of applications using Django REST framework. Stack : Django REST , Djoser 4. Client part using Vue.js \ud83d\udea7 TODO","title":"Home"},{"location":"#ifmo-webdevelopment-course","text":"Results of Laboratory Works in the Web Development Course at IFMO University. Author: Kormanovskaya Darina , K33401","title":"IFMO WebDevelopment Course"},{"location":"#labs","text":"","title":"Labs"},{"location":"#1-working-with-sockets","text":"Purpose of work : to master the practical skills and abilities to implement web-servers and the use of sockets. Stack : Python libs socket , threading","title":"1. Working with sockets | \ud83d\udcda"},{"location":"#2-django","text":"Purpose of work : to get a brief introduction to the workings of the Django web framework. Stack : Django","title":"2. Django | \ud83d\udcda"},{"location":"#3-django-rest","text":"Purpose of work : to acquire practical skills in implementing the server side (backend) of applications using Django REST framework. Stack : Django REST , Djoser","title":"3. Django REST  | \ud83d\udcda"},{"location":"#4-client-part-using-vuejs","text":"\ud83d\udea7 TODO","title":"4. Client part using Vue.js"},{"location":"api/","text":"","title":"Summary"},{"location":"author/","text":"Show authors list URL : /library/authors/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ] Show book list writen by selected author URL : /library/authors/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"name\": \"string\", \"book_set\": [ { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ], \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" } ] }","title":"Authors"},{"location":"author/#show-authors-list","text":"URL : /library/authors/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ]","title":"Show authors list"},{"location":"author/#show-book-list-writen-by-selected-author","text":"URL : /library/authors/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"name\": \"string\", \"book_set\": [ { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ], \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" } ] }","title":"Show book list writen by selected author"},{"location":"books/","text":"Show all books Show book list with detailed information. URL : /library/books/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ], \"avg_rating\": \"string\", \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" } ] Show book info Returns all books with fill information. URL : /library/books/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"id\": 0, \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\", \"author\": 0, \"genre\": [ 0 ] } AdminUser permissions required Create new book URL : /library/books/create/ Allow : POST, OPTIONS WWW-Authenticate : Token Example value : { \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"author\": 0, \"genre\": [ 0 ] } Delete book URL : /library/books/{id}/delete/ Allow : DELETE, OPTIONS WWW-Authenticate : Token Update book URL : /library/books/{id}/update/ Allow : PUT, PATCH, OPTIONS WWW-Authenticate : Token Example value : { \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"author\": 0, \"genre\": [ 0 ] }","title":"Books"},{"location":"books/#show-all-books","text":"Show book list with detailed information. URL : /library/books/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ], \"avg_rating\": \"string\", \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" } ]","title":"Show all books"},{"location":"books/#show-book-info","text":"Returns all books with fill information. URL : /library/books/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"id\": 0, \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\", \"author\": 0, \"genre\": [ 0 ] }","title":"Show book info"},{"location":"books/#adminuser-permissions-required","text":"","title":"AdminUser permissions required"},{"location":"books/#create-new-book","text":"URL : /library/books/create/ Allow : POST, OPTIONS WWW-Authenticate : Token Example value : { \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"author\": 0, \"genre\": [ 0 ] }","title":"Create new book"},{"location":"books/#delete-book","text":"URL : /library/books/{id}/delete/ Allow : DELETE, OPTIONS WWW-Authenticate : Token","title":"Delete book"},{"location":"books/#update-book","text":"URL : /library/books/{id}/update/ Allow : PUT, PATCH, OPTIONS WWW-Authenticate : Token Example value : { \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"author\": 0, \"genre\": [ 0 ] }","title":"Update book"},{"location":"genre/","text":"Show genres list URL : /library/genres/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ] Show book list of selected genre URL : /library/genres/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"name\": \"string\", \"book_set\": [ { \"id\": 0, \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\", \"author\": 0, \"genre\": [ 0 ] } ] }","title":"Genres"},{"location":"genre/#show-genres-list","text":"URL : /library/genres/ Allow : GET, HEAD, OPTIONS Example value : [ { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" } ]","title":"Show genres list"},{"location":"genre/#show-book-list-of-selected-genre","text":"URL : /library/genres/{id}/ Allow : GET, HEAD, OPTIONS Example value : { \"name\": \"string\", \"book_set\": [ { \"id\": 0, \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\", \"author\": 0, \"genre\": [ 0 ] } ] }","title":"Show book list of selected genre"},{"location":"lab1/","text":"Laboratory Work 1: Working with sockets Purpose of work : to master the practical skills and abilities to implement web-servers and the use of sockets. Stack : Python libs socket, threading Task 1 Implement the client and server part of the application. The client sends a \"Hello, server\" message to the server. The message must be reflected on the server side. The server responds with a \"Hello, client\" message to the client. The message must be displayed to the client. Implement using the UDP protocol. config.py contains the necessary constants # address properties import socket HOST = socket.gethostbyname(socket.gethostname()) PORT = 7171 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 64 FORMAT = 'utf-8' server.py creates a server socket and waits for messages from the client from config import * CONNECT_MSG = \"Hello, client!\" def main(): UDPServer = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) UDPServer.bind(ADDR) print(f\"[STARTED] server is working on {HOST}:{PORT}\") while True: msg, addr = UDPServer.recvfrom(BUFFER_SIZE) print(f\"[{addr[0]}:{addr[1]}]: {msg.decode(FORMAT)}\") UDPServer.sendto(CONNECT_MSG.encode(FORMAT), addr) if __name__ == \"__main__\": main() client.py connects to the server and sends it a message from config import * CONNECT_MSG = \"Hello, server!\" def main(): UDPClient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) UDPClient.sendto(CONNECT_MSG.encode(FORMAT), ADDR) msg, addr = UDPClient.recvfrom(BUFFER_SIZE) print(f\"[{addr[0]}:{addr[1]}]: {msg.decode(FORMAT)}\") if __name__ == \"__main__\": main() Task 2 Implement the client and server part of the application. The client asks the server to perform a mathematical operation: solving a quadratic equation, the parameters of which are entered from the keyboard. The server processes the received data and returns the result to the client. Implement using the TCP protocol config.py contains the necessary constants import socket # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7272 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 1024 FORMAT = 'utf-8' MISTAKE = \"[INVALID INPUT] three coefficients needed, separated by space. Example: 1 2 3\" server.py creates a server socket, checks the input and sends an answer if possible from config import * from math import sqrt def calculate(a: float, b: float, c: float) -> str: d = b * b - 4 * a * c if d < 0: return 'No real roots' else: return ', '.join(str(r) for r in {(-b - sqrt(d)) / 2 / a, (-b + sqrt(d)) / 2 / a}) def main(): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(ADDR) server.listen(1) print(f\"[STARTED] Server is listening on {HOST}\") while True: conn, addr = server.accept() data = conn.recv(BUFFER_SIZE) print(f\"[NEW REQUEST from {addr[0]}:{addr[1]}]: {data.decode(FORMAT)}\") if not data: break try: values = [float(i) for i in data.decode(FORMAT).split(' ')] if len(values) != 3: raise ValueError conn.sendall(calculate(*values).encode(FORMAT)) except ValueError: conn.sendall(MISTAKE.encode(FORMAT)) print(\"the result was sent!\") conn.close() if __name__ == \"__main__\": main() client.py connects to the server and sends it values from config import * def main(): client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(ADDR) print(f\"You are connected to {HOST}:{PORT}, \" f\"which calculates the roots of the quadratic equation:\" f\" a*x^2 + b*x + c = 0\") while True: try: inp = input(\"Enter the a, b, c: \") values = [float(i) for i in inp.split(' ')] if len(values) != 3: raise ValueError client.sendall(inp.encode(FORMAT)) print(f\"Answer: {client.recv(1024).decode(FORMAT)}\") break except ValueError: print(MISTAKE) if __name__ == \"__main__\": main() Task 3 Implement the server part of the application. The client connects to the server. In response The client receives an http message containing a html page, which the server The client receives a http message containing a page which the server loads from the index.html file. index.html response template <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Lab 1 | Task 3</title> </head> <body> <iframe width=\"80%\" height=\"713\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media;\" allowfullscreen style=\"margin-left: 10%; margin-right: 10%\"></iframe> </body> </html> server.py responding with HTML send_answer() sending HTTP answer, which contains index.html template, to the client main() - creating server socket and running it import socket # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7373 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 1024 FORMAT = 'utf-8' def send_answer(conn, status=\"200 OK\", typ=\"text/html; charset=utf-8\", data=\"\"): conn.broadcast(b\"HTTP/1.1 \" + status.encode(FORMAT) + b\"\\r\\n\") conn.broadcast(b\"Server: simplehttp\\r\\n\") conn.broadcast(b\"Connection: close\\r\\n\") conn.broadcast(b\"Content-Type: \" + typ.encode(FORMAT) + b\"\\r\\n\") conn.broadcast(b\"\\r\\n\") conn.broadcast(data.encode(FORMAT)) def main(): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(ADDR) server.listen() print(f\"[STARTED] Server is listening on {HOST}:{PORT}\") while True: conn, addr = server.accept() data = conn.recv(BUFFER_SIZE) if not data: break print(f\"[NEW CONNECTION]: {addr[0]}:{addr[1]}\") send_answer(conn, data=open('index.html', 'r').read()) conn.close() if __name__ == \"__main__\": main() Task 4 Implement multiplayer chat. config.py contains the necessary constants import socket from threading import Thread # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7474 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 64 FORMAT = 'utf-8' ASKING = \"Enter your username: \" server.py contains class Chat - s: socket.socket - server socket - users: Dict[socket.socket, str] - dictionary where key is client socket, value - username broadcast() - sending a message to all clients in users handle() - handling clients messages run() - starting server from typing import Dict from config import * class Chat: def __init__(self, host, port): self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.s.bind((HOST, PORT)) self.users: Dict[socket.socket, str] = dict() def broadcast(self, msg: str, username: str): for un in self.users: if self.users[un] == username: continue un.send(f\"{username}: {msg}\".encode(FORMAT)) def handle(self, user: socket.socket): while True: try: msg = user.recv(BUFFER_SIZE).decode(FORMAT) self.broadcast(msg, self.users[user]) except OSError: user.close() msg = f\"{self.users[user]} has left the chat :'(\" self.users.pop(user) self.broadcast(msg, '[sys]') break def run(self): self.s.listen() print(f\"[STARTED] server is working on {HOST}:{PORT}\") while True: conn, addr = self.s.accept() print(f\"[NEW CONNECTION]: {addr[0]}:{addr[1]}\") conn.send(ASKING.encode(FORMAT)) username = conn.recv(1024).decode(FORMAT) self.users[conn] = username self.broadcast(f\"{username} has connected to the chat\", \"[sys]\") thread = Thread(target=self.handle, args=[conn]) thread.start() def main(): print('Server is starting...') chat = Chat(HOST, PORT) chat.run() if __name__ == \"__main__\": main() client.py Contains class User - username: str - client username - s: socket.socket - client socket receive() - getting messages from the server send() - sending new message to the server start() - starting client socket thread from config import * class User: def __init__(self, address): self.username = \"\" self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.s.connect(address) def receive(self): while True: try: msg = self.s.recv(BUFFER_SIZE).decode(FORMAT) if msg == ASKING: self.s.send(self.username.encode(FORMAT)) else: print(msg) except: print('Something went wrong. Disconnecting!') self.s.close() break def send(self): while True: msg = input() self.s.send(msg.encode(FORMAT)) def start(self): self.username = input(ASKING) recv_thread = Thread(target=self.receive) recv_thread.start() send_thread = Thread(target=self.send) send_thread.start() def main(): user = User(ADDR) user.start() if __name__ == \"__main__\": main() Task 5 Write a simple web-server to handle GET and POST http requests by means of Python and socket library. request.py contains Request class and Response class from functools import lru_cache from urllib.parse import parse_qs, urlparse class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body server.py HTTPServer. Source: https://iximiuz.com/ru/posts/writing-python-web-server-part-3/ import json import socket from request import Request, Response from email.parser import Parser MAX_LINE = 64 * 1024 MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port, name): self._host = host self._port = port self._name = name self._marks = {'\u0424\u0438\u0437\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430': 5} print(f\"[RUNNING] Created HTTPServer '{name}'\") def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self._host, self._port)) serv_sock.listen() print(f\"[LISTENING] Server '{self._name}' on {self._host}:{self._port}\\r\\n\") while True: conn, addr = serv_sock.accept() print(f\"[NEW]: {addr}\") try: self.serve_client(conn) except Exception as e: print('[ERROR]: Client serving failed', e) finally: print('[EXIT]') serv_sock.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise HTTPError(400, 'Bad request', 'Host header is missing') if host != f'{self._host}:{self._port}': raise HTTPError(404, 'Not found') return Request(method, target, ver, headers, rfile) @staticmethod def parse_request_line(rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver @staticmethod def parse_headers(rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): if req.path == '/update' and req.method == 'POST': return self.handle_post_mark(req) if req.path == '/marks' and req.method == 'GET': return self.handle_get_marks(req) raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_post_mark(self, req): self._marks[req.query['name'][0]] = req.query['mark'][0] return Response(204, 'Created') def handle_get_marks(self, req): accept = req.headers.get('Accept') if 'text/html' in accept: contentType = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>\u041e\u0446\u0435\u043d\u043a\u0438 ({len(self._marks)})</div>' body += '<ul>' for m in self._marks: body += f'<li>{m}: {self._marks[m]}</li>' body += '</ul>' body += '</body></html>' elif 'application/json' in accept: contentType = 'application/json; charset=utf-8' body = json.dumps(self._marks) else: return Response(406, 'Not Acceptable') body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body if __name__ == '__main__': print('[LOADING...]') host = socket.gethostbyname(socket.gethostname()) port = 7777 serv = MyHTTPServer(host, port, 'Marks') try: serv.serve_forever() except KeyboardInterrupt: print('Exit!') pass","title":"Sockets"},{"location":"lab1/#laboratory-work-1-working-with-sockets","text":"Purpose of work : to master the practical skills and abilities to implement web-servers and the use of sockets. Stack : Python libs socket, threading","title":"Laboratory Work 1: Working with sockets"},{"location":"lab1/#task-1","text":"Implement the client and server part of the application. The client sends a \"Hello, server\" message to the server. The message must be reflected on the server side. The server responds with a \"Hello, client\" message to the client. The message must be displayed to the client. Implement using the UDP protocol.","title":"Task 1"},{"location":"lab1/#configpy","text":"contains the necessary constants # address properties import socket HOST = socket.gethostbyname(socket.gethostname()) PORT = 7171 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 64 FORMAT = 'utf-8'","title":"config.py"},{"location":"lab1/#serverpy","text":"creates a server socket and waits for messages from the client from config import * CONNECT_MSG = \"Hello, client!\" def main(): UDPServer = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) UDPServer.bind(ADDR) print(f\"[STARTED] server is working on {HOST}:{PORT}\") while True: msg, addr = UDPServer.recvfrom(BUFFER_SIZE) print(f\"[{addr[0]}:{addr[1]}]: {msg.decode(FORMAT)}\") UDPServer.sendto(CONNECT_MSG.encode(FORMAT), addr) if __name__ == \"__main__\": main()","title":"server.py"},{"location":"lab1/#clientpy","text":"connects to the server and sends it a message from config import * CONNECT_MSG = \"Hello, server!\" def main(): UDPClient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) UDPClient.sendto(CONNECT_MSG.encode(FORMAT), ADDR) msg, addr = UDPClient.recvfrom(BUFFER_SIZE) print(f\"[{addr[0]}:{addr[1]}]: {msg.decode(FORMAT)}\") if __name__ == \"__main__\": main()","title":"client.py"},{"location":"lab1/#task-2","text":"Implement the client and server part of the application. The client asks the server to perform a mathematical operation: solving a quadratic equation, the parameters of which are entered from the keyboard. The server processes the received data and returns the result to the client. Implement using the TCP protocol","title":"Task 2"},{"location":"lab1/#configpy_1","text":"contains the necessary constants import socket # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7272 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 1024 FORMAT = 'utf-8' MISTAKE = \"[INVALID INPUT] three coefficients needed, separated by space. Example: 1 2 3\"","title":"config.py"},{"location":"lab1/#serverpy_1","text":"creates a server socket, checks the input and sends an answer if possible from config import * from math import sqrt def calculate(a: float, b: float, c: float) -> str: d = b * b - 4 * a * c if d < 0: return 'No real roots' else: return ', '.join(str(r) for r in {(-b - sqrt(d)) / 2 / a, (-b + sqrt(d)) / 2 / a}) def main(): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(ADDR) server.listen(1) print(f\"[STARTED] Server is listening on {HOST}\") while True: conn, addr = server.accept() data = conn.recv(BUFFER_SIZE) print(f\"[NEW REQUEST from {addr[0]}:{addr[1]}]: {data.decode(FORMAT)}\") if not data: break try: values = [float(i) for i in data.decode(FORMAT).split(' ')] if len(values) != 3: raise ValueError conn.sendall(calculate(*values).encode(FORMAT)) except ValueError: conn.sendall(MISTAKE.encode(FORMAT)) print(\"the result was sent!\") conn.close() if __name__ == \"__main__\": main()","title":"server.py"},{"location":"lab1/#clientpy_1","text":"connects to the server and sends it values from config import * def main(): client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(ADDR) print(f\"You are connected to {HOST}:{PORT}, \" f\"which calculates the roots of the quadratic equation:\" f\" a*x^2 + b*x + c = 0\") while True: try: inp = input(\"Enter the a, b, c: \") values = [float(i) for i in inp.split(' ')] if len(values) != 3: raise ValueError client.sendall(inp.encode(FORMAT)) print(f\"Answer: {client.recv(1024).decode(FORMAT)}\") break except ValueError: print(MISTAKE) if __name__ == \"__main__\": main()","title":"client.py"},{"location":"lab1/#task-3","text":"Implement the server part of the application. The client connects to the server. In response The client receives an http message containing a html page, which the server The client receives a http message containing a page which the server loads from the index.html file.","title":"Task 3"},{"location":"lab1/#indexhtml","text":"response template <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Lab 1 | Task 3</title> </head> <body> <iframe width=\"80%\" height=\"713\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media;\" allowfullscreen style=\"margin-left: 10%; margin-right: 10%\"></iframe> </body> </html>","title":"index.html"},{"location":"lab1/#serverpy_2","text":"responding with HTML send_answer() sending HTTP answer, which contains index.html template, to the client main() - creating server socket and running it import socket # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7373 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 1024 FORMAT = 'utf-8' def send_answer(conn, status=\"200 OK\", typ=\"text/html; charset=utf-8\", data=\"\"): conn.broadcast(b\"HTTP/1.1 \" + status.encode(FORMAT) + b\"\\r\\n\") conn.broadcast(b\"Server: simplehttp\\r\\n\") conn.broadcast(b\"Connection: close\\r\\n\") conn.broadcast(b\"Content-Type: \" + typ.encode(FORMAT) + b\"\\r\\n\") conn.broadcast(b\"\\r\\n\") conn.broadcast(data.encode(FORMAT)) def main(): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(ADDR) server.listen() print(f\"[STARTED] Server is listening on {HOST}:{PORT}\") while True: conn, addr = server.accept() data = conn.recv(BUFFER_SIZE) if not data: break print(f\"[NEW CONNECTION]: {addr[0]}:{addr[1]}\") send_answer(conn, data=open('index.html', 'r').read()) conn.close() if __name__ == \"__main__\": main()","title":"server.py"},{"location":"lab1/#task-4","text":"Implement multiplayer chat.","title":"Task 4"},{"location":"lab1/#configpy_2","text":"contains the necessary constants import socket from threading import Thread # address properties HOST = socket.gethostbyname(socket.gethostname()) PORT = 7474 ADDR = (HOST, PORT) # message properties BUFFER_SIZE = 64 FORMAT = 'utf-8' ASKING = \"Enter your username: \"","title":"config.py"},{"location":"lab1/#serverpy_3","text":"contains class Chat - s: socket.socket - server socket - users: Dict[socket.socket, str] - dictionary where key is client socket, value - username broadcast() - sending a message to all clients in users handle() - handling clients messages run() - starting server from typing import Dict from config import * class Chat: def __init__(self, host, port): self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.s.bind((HOST, PORT)) self.users: Dict[socket.socket, str] = dict() def broadcast(self, msg: str, username: str): for un in self.users: if self.users[un] == username: continue un.send(f\"{username}: {msg}\".encode(FORMAT)) def handle(self, user: socket.socket): while True: try: msg = user.recv(BUFFER_SIZE).decode(FORMAT) self.broadcast(msg, self.users[user]) except OSError: user.close() msg = f\"{self.users[user]} has left the chat :'(\" self.users.pop(user) self.broadcast(msg, '[sys]') break def run(self): self.s.listen() print(f\"[STARTED] server is working on {HOST}:{PORT}\") while True: conn, addr = self.s.accept() print(f\"[NEW CONNECTION]: {addr[0]}:{addr[1]}\") conn.send(ASKING.encode(FORMAT)) username = conn.recv(1024).decode(FORMAT) self.users[conn] = username self.broadcast(f\"{username} has connected to the chat\", \"[sys]\") thread = Thread(target=self.handle, args=[conn]) thread.start() def main(): print('Server is starting...') chat = Chat(HOST, PORT) chat.run() if __name__ == \"__main__\": main()","title":"server.py"},{"location":"lab1/#clientpy_2","text":"Contains class User - username: str - client username - s: socket.socket - client socket receive() - getting messages from the server send() - sending new message to the server start() - starting client socket thread from config import * class User: def __init__(self, address): self.username = \"\" self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.s.connect(address) def receive(self): while True: try: msg = self.s.recv(BUFFER_SIZE).decode(FORMAT) if msg == ASKING: self.s.send(self.username.encode(FORMAT)) else: print(msg) except: print('Something went wrong. Disconnecting!') self.s.close() break def send(self): while True: msg = input() self.s.send(msg.encode(FORMAT)) def start(self): self.username = input(ASKING) recv_thread = Thread(target=self.receive) recv_thread.start() send_thread = Thread(target=self.send) send_thread.start() def main(): user = User(ADDR) user.start() if __name__ == \"__main__\": main()","title":"client.py"},{"location":"lab1/#task-5","text":"Write a simple web-server to handle GET and POST http requests by means of Python and socket library.","title":"Task 5"},{"location":"lab1/#requestpy","text":"contains Request class and Response class from functools import lru_cache from urllib.parse import parse_qs, urlparse class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body","title":"request.py"},{"location":"lab1/#serverpy_4","text":"HTTPServer. Source: https://iximiuz.com/ru/posts/writing-python-web-server-part-3/ import json import socket from request import Request, Response from email.parser import Parser MAX_LINE = 64 * 1024 MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port, name): self._host = host self._port = port self._name = name self._marks = {'\u0424\u0438\u0437\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430': 5} print(f\"[RUNNING] Created HTTPServer '{name}'\") def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self._host, self._port)) serv_sock.listen() print(f\"[LISTENING] Server '{self._name}' on {self._host}:{self._port}\\r\\n\") while True: conn, addr = serv_sock.accept() print(f\"[NEW]: {addr}\") try: self.serve_client(conn) except Exception as e: print('[ERROR]: Client serving failed', e) finally: print('[EXIT]') serv_sock.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise HTTPError(400, 'Bad request', 'Host header is missing') if host != f'{self._host}:{self._port}': raise HTTPError(404, 'Not found') return Request(method, target, ver, headers, rfile) @staticmethod def parse_request_line(rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver @staticmethod def parse_headers(rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): if req.path == '/update' and req.method == 'POST': return self.handle_post_mark(req) if req.path == '/marks' and req.method == 'GET': return self.handle_get_marks(req) raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_post_mark(self, req): self._marks[req.query['name'][0]] = req.query['mark'][0] return Response(204, 'Created') def handle_get_marks(self, req): accept = req.headers.get('Accept') if 'text/html' in accept: contentType = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>\u041e\u0446\u0435\u043d\u043a\u0438 ({len(self._marks)})</div>' body += '<ul>' for m in self._marks: body += f'<li>{m}: {self._marks[m]}</li>' body += '</ul>' body += '</body></html>' elif 'application/json' in accept: contentType = 'application/json; charset=utf-8' body = json.dumps(self._marks) else: return Response(406, 'Not Acceptable') body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body if __name__ == '__main__': print('[LOADING...]') host = socket.gethostbyname(socket.gethostname()) port = 7777 serv = MyHTTPServer(host, port, 'Marks') try: serv.serve_forever() except KeyboardInterrupt: print('Exit!') pass","title":"server.py"},{"location":"lab2/","text":"Laboratory Work 2: Django Purpose of work : acquiring practical skills and abilities to implement Django 2.2 web services. Stack : Django Task Implement a website using Django 3 framework and PostgreSQL* DBMS, according to the variant of the laboratory work. Task description (variant 4) Tour list of the tour operator Stores information about tour name, tour description, tour period, payment conditions. The following functionality must be implemented: - Registration of new users. - Viewing and booking tours. User must be able to edit and delete their bookings. - Writing reviews for tours. When adding a comment the dates of the tour, comment text, rating (1-10), information about the commenter must be saved. - The administrator must be able to confirm tour bookings using Django-admin. - A table showing all sold tours by country should be generated in the client part. Diagram Models class Country(models.Model): name = models.CharField('Country name', max_length=64, unique=True) slug = models.SlugField('Country link', max_length=64, unique=True) description = models.CharField('Country description', max_length=1000, null=True) image = models.ImageField('Image of country', upload_to='images/', null=True, blank=True) def get_absolute_url(self): return reverse('country_details_url', kwargs={'slug': self.slug}) def __str__(self): return self.name class Tour(models.Model): title = models.CharField(max_length=150, db_index=True) description = models.CharField(max_length=1024, db_index=True) country = models.ForeignKey(Country, on_delete=models.CASCADE) slug = models.SlugField(max_length=150, unique=True) price_per_person = models.FloatField() nights_count = models.IntegerField() def __str__(self): return self.title def get_absolute_url(self): return reverse('tour_details_url', kwargs={'slug': self.slug}) class TourImage(models.Model): name = models.CharField('Tour image name', max_length=64, unique=True) image = models.ImageField(upload_to='images/', null=True, blank=True) tour = models.ForeignKey(Tour, on_delete=models.CASCADE, null=True, blank=True) def __str__(self): return self.name Customer = get_user_model() class TourConducting(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE) customer = models.ForeignKey(Customer, on_delete=models.CASCADE) date_start = models.DateField() is_verified = models.BooleanField(default=False) is_paid = models.BooleanField(default=False) tourists = models.IntegerField(default=1) contact_info = models.TextField() review_text = models.TextField(null=True, default=None, blank=True) rate = models.IntegerField(null=True, default=None, blank=True) def __str__(self): status = 'PAID' if self.is_paid else 'VERIFIED' if self.is_verified else 'NEW' return f\"[{status}] {self.tour} / {self.customer}\" Urls urlpatterns = [ path('countries/', countries_list, name='countries_list_url'), path('countries/<str:slug>/', country_details, name='country_details_url'), path('tours/', tours_list, name='tours_list_url'), path('tours/<str:slug>/', tour_details, name='tour_details_url'), path('registration/', registration, name='registration_url'), path('login/', login_page, name='login_url'), path('logout/', logout_user, name='logout_url'), path('profile/', profile, name='profile_url'), path('sells/', sells, name='sells_url'), path('profile/<int:pk>/review/update/', ReviewUpdate.as_view()), path('profile/<int:pk>/delete/', TourConductingDelete.as_view()), path('profile/<int:pk>/update/', TourConductingUpdate.as_view()), ] Views Countries info def countries_list(request): countries = Country.objects.all() return render(request, 'WhoopsieTravel/countries.html', context={'countries': countries}) @login_required(login_url='login_url') def country_details(request, slug): country = Country.objects.get(slug__iexact=slug) tours = Tour.objects.filter(country__name=country.name) for t in tours: images = TourImage.objects.filter(tour__title=t.title) t.images = images return render(request, 'WhoopsieTravel/country_details.html', context={'country': country, 'tours': tours}) Tours info def tours_list(request): tours = Tour.objects.all() for t in tours: images = TourImage.objects.filter(tour__title=t.title) t.images = images return render(request, 'WhoopsieTravel/tours.html', context={'tours': tours}) @login_required(login_url='login_url') def tour_details(request, slug): tour = Tour.objects.get(slug__iexact=slug) rates = TourConducting.objects.filter(tour__title=tour.title).exclude(rate=None) images = TourImage.objects.filter(tour__title=tour.title) tour.images = images form = BookingForm(request.POST or None) if request.method == 'POST': form = BookingForm(request.POST) if form.is_valid(): form.save() return redirect('profile_url') isOrdered = TourConducting.objects.filter(customer__username=request.user.username, tour__title=tour.title, date_start__gt=datetime.date.today()) return render(request, 'WhoopsieTravel/tour_details.html', context={'tour': tour, 'form': form, 'ordered': isOrdered, 'rates': rates}) Registration and authentication def registration(request): if request.user.is_authenticated: return redirect('tours_list_url') else: form = CreateCustomerForm() if request.method == 'POST': form = CreateCustomerForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Account was created for ' + form.cleaned_data.get('username')) return redirect('login_url') return render(request, 'WhoopsieTravel/registration.html', context={'form': form}) def login_page(request): if request.user.is_authenticated: return redirect('tours_list_url') else: if request.method == 'POST': username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('profile_url') else: messages.info(request, 'Username OR password is incorrect') return render(request, 'WhoopsieTravel/login.html', context={}) def logout_user(request): logout(request) return redirect('login_url') Extra pages @login_required(login_url='login_url') def profile(request): tour_conducting = TourConducting.objects.filter(customer__username__iexact=request.user) tour_conducting = tour_conducting.order_by('date_start').reverse() return render(request, 'WhoopsieTravel/profile.html', context={'tc': tour_conducting, 'today': datetime.date.today()}) def sells(request): tour_conducting = TourConducting.objects.filter(is_paid=True).order_by('date_start').reverse() return render(request, 'WhoopsieTravel/sells.html', context={'tc': tour_conducting}) Django's views to CRUD operations class ReviewUpdate(UpdateView): model = TourConducting fields = ['review_text', 'rate'] success_url = '/travel/profile' template_name = 'WhoopsieTravel/review.html' class TourConductingDelete(DeleteView): model = TourConducting template_name = 'WhoopsieTravel/reserve_delete.html' success_url = '/travel/profile' class TourConductingUpdate(UpdateView): model = TourConducting fields = ['date_start', 'contact_info', 'tourists'] success_url = '/travel/profile' template_name = 'WhoopsieTravel/reserve_update.html' Results","title":"Django"},{"location":"lab2/#laboratory-work-2-django","text":"Purpose of work : acquiring practical skills and abilities to implement Django 2.2 web services. Stack : Django","title":"Laboratory Work 2: Django"},{"location":"lab2/#task","text":"Implement a website using Django 3 framework and PostgreSQL* DBMS, according to the variant of the laboratory work.","title":"Task"},{"location":"lab2/#task-description-variant-4","text":"Tour list of the tour operator Stores information about tour name, tour description, tour period, payment conditions. The following functionality must be implemented: - Registration of new users. - Viewing and booking tours. User must be able to edit and delete their bookings. - Writing reviews for tours. When adding a comment the dates of the tour, comment text, rating (1-10), information about the commenter must be saved. - The administrator must be able to confirm tour bookings using Django-admin. - A table showing all sold tours by country should be generated in the client part.","title":"Task description (variant 4)"},{"location":"lab2/#diagram","text":"","title":"Diagram"},{"location":"lab2/#models","text":"class Country(models.Model): name = models.CharField('Country name', max_length=64, unique=True) slug = models.SlugField('Country link', max_length=64, unique=True) description = models.CharField('Country description', max_length=1000, null=True) image = models.ImageField('Image of country', upload_to='images/', null=True, blank=True) def get_absolute_url(self): return reverse('country_details_url', kwargs={'slug': self.slug}) def __str__(self): return self.name class Tour(models.Model): title = models.CharField(max_length=150, db_index=True) description = models.CharField(max_length=1024, db_index=True) country = models.ForeignKey(Country, on_delete=models.CASCADE) slug = models.SlugField(max_length=150, unique=True) price_per_person = models.FloatField() nights_count = models.IntegerField() def __str__(self): return self.title def get_absolute_url(self): return reverse('tour_details_url', kwargs={'slug': self.slug}) class TourImage(models.Model): name = models.CharField('Tour image name', max_length=64, unique=True) image = models.ImageField(upload_to='images/', null=True, blank=True) tour = models.ForeignKey(Tour, on_delete=models.CASCADE, null=True, blank=True) def __str__(self): return self.name Customer = get_user_model() class TourConducting(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE) customer = models.ForeignKey(Customer, on_delete=models.CASCADE) date_start = models.DateField() is_verified = models.BooleanField(default=False) is_paid = models.BooleanField(default=False) tourists = models.IntegerField(default=1) contact_info = models.TextField() review_text = models.TextField(null=True, default=None, blank=True) rate = models.IntegerField(null=True, default=None, blank=True) def __str__(self): status = 'PAID' if self.is_paid else 'VERIFIED' if self.is_verified else 'NEW' return f\"[{status}] {self.tour} / {self.customer}\"","title":"Models"},{"location":"lab2/#urls","text":"urlpatterns = [ path('countries/', countries_list, name='countries_list_url'), path('countries/<str:slug>/', country_details, name='country_details_url'), path('tours/', tours_list, name='tours_list_url'), path('tours/<str:slug>/', tour_details, name='tour_details_url'), path('registration/', registration, name='registration_url'), path('login/', login_page, name='login_url'), path('logout/', logout_user, name='logout_url'), path('profile/', profile, name='profile_url'), path('sells/', sells, name='sells_url'), path('profile/<int:pk>/review/update/', ReviewUpdate.as_view()), path('profile/<int:pk>/delete/', TourConductingDelete.as_view()), path('profile/<int:pk>/update/', TourConductingUpdate.as_view()), ]","title":"Urls"},{"location":"lab2/#views","text":"Countries info def countries_list(request): countries = Country.objects.all() return render(request, 'WhoopsieTravel/countries.html', context={'countries': countries}) @login_required(login_url='login_url') def country_details(request, slug): country = Country.objects.get(slug__iexact=slug) tours = Tour.objects.filter(country__name=country.name) for t in tours: images = TourImage.objects.filter(tour__title=t.title) t.images = images return render(request, 'WhoopsieTravel/country_details.html', context={'country': country, 'tours': tours}) Tours info def tours_list(request): tours = Tour.objects.all() for t in tours: images = TourImage.objects.filter(tour__title=t.title) t.images = images return render(request, 'WhoopsieTravel/tours.html', context={'tours': tours}) @login_required(login_url='login_url') def tour_details(request, slug): tour = Tour.objects.get(slug__iexact=slug) rates = TourConducting.objects.filter(tour__title=tour.title).exclude(rate=None) images = TourImage.objects.filter(tour__title=tour.title) tour.images = images form = BookingForm(request.POST or None) if request.method == 'POST': form = BookingForm(request.POST) if form.is_valid(): form.save() return redirect('profile_url') isOrdered = TourConducting.objects.filter(customer__username=request.user.username, tour__title=tour.title, date_start__gt=datetime.date.today()) return render(request, 'WhoopsieTravel/tour_details.html', context={'tour': tour, 'form': form, 'ordered': isOrdered, 'rates': rates}) Registration and authentication def registration(request): if request.user.is_authenticated: return redirect('tours_list_url') else: form = CreateCustomerForm() if request.method == 'POST': form = CreateCustomerForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Account was created for ' + form.cleaned_data.get('username')) return redirect('login_url') return render(request, 'WhoopsieTravel/registration.html', context={'form': form}) def login_page(request): if request.user.is_authenticated: return redirect('tours_list_url') else: if request.method == 'POST': username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('profile_url') else: messages.info(request, 'Username OR password is incorrect') return render(request, 'WhoopsieTravel/login.html', context={}) def logout_user(request): logout(request) return redirect('login_url') Extra pages @login_required(login_url='login_url') def profile(request): tour_conducting = TourConducting.objects.filter(customer__username__iexact=request.user) tour_conducting = tour_conducting.order_by('date_start').reverse() return render(request, 'WhoopsieTravel/profile.html', context={'tc': tour_conducting, 'today': datetime.date.today()}) def sells(request): tour_conducting = TourConducting.objects.filter(is_paid=True).order_by('date_start').reverse() return render(request, 'WhoopsieTravel/sells.html', context={'tc': tour_conducting}) Django's views to CRUD operations class ReviewUpdate(UpdateView): model = TourConducting fields = ['review_text', 'rate'] success_url = '/travel/profile' template_name = 'WhoopsieTravel/review.html' class TourConductingDelete(DeleteView): model = TourConducting template_name = 'WhoopsieTravel/reserve_delete.html' success_url = '/travel/profile' class TourConductingUpdate(UpdateView): model = TourConducting fields = ['date_start', 'contact_info', 'tourists'] success_url = '/travel/profile' template_name = 'WhoopsieTravel/reserve_update.html' Results","title":"Views"},{"location":"lab3/","text":"Library The service is a reader's diary. Search for something to read, add books to your bookshelf, leave reviews. Entities User Service user provided by Django. Achievement Achievements obtained through user actions. Author Author of the books. Book Book information: genre, author, description, etc. Reading The book on the user's shelf. Contains status and feedback.","title":"About"},{"location":"lab3/#library","text":"The service is a reader's diary. Search for something to read, add books to your bookshelf, leave reviews.","title":"Library"},{"location":"lab3/#entities","text":"User Service user provided by Django. Achievement Achievements obtained through user actions. Author Author of the books. Book Book information: genre, author, description, etc. Reading The book on the user's shelf. Contains status and feedback.","title":"Entities"},{"location":"me/","text":"Show current user info URL : /library/me/ Allow : GET, HEAD, OPTIONS Example value : { \"username\": \"string\", \"reading_set\": [ { \"id\": 0, \"book\": { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 1, \"name\": \"string\", \"slug\": \"string\" } ], \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" }, \"is_read\": false, \"review_text\": \"string\", \"rate\": null, \"user\": 0 } ], \"userachievement_set\": [] }","title":"Me"},{"location":"me/#show-current-user-info","text":"URL : /library/me/ Allow : GET, HEAD, OPTIONS Example value : { \"username\": \"string\", \"reading_set\": [ { \"id\": 0, \"book\": { \"id\": 0, \"author\": { \"id\": 0, \"name\": \"string\", \"slug\": \"string\" }, \"genre\": [ { \"id\": 1, \"name\": \"string\", \"slug\": \"string\" } ], \"title\": \"string\", \"slug\": \"string\", \"description\": \"string\", \"image\": \"string\" }, \"is_read\": false, \"review_text\": \"string\", \"rate\": null, \"user\": 0 } ], \"userachievement_set\": [] }","title":"Show current user info"},{"location":"prac3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1 \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1: class Vehicle(models.Model): number = models.CharField(max_length=15) brand = models.CharField(max_length=20) model = models.CharField(max_length=20) color = models.CharField(max_length=30) def __str__(self): return self.number class Driver(AbstractUser): surname = models.CharField(max_length=30, null=True, blank=True) name = models.CharField(max_length=30, null=True, blank=True) birth_date = models.DateTimeField(null=True, blank=True) vehicles = models.ManyToManyField(Vehicle, through='Ownership') passport = models.CharField(max_length=11, null=True, blank=True) address = models.CharField(max_length=200, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) def __str__(self): return f\"{self.surname} {self.name}\" class Licence(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Ownership(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE) start_date = models.DateTimeField() expiry_date = models.DateTimeField() def __str__(self): return \"{}_{}\".format(self.driver.__str__(), self.vehicle.__str__()) \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b >>> sokka = Driver.objects.create(surname='WaterTribe', name='Sokka', username='Boomerang777', password='aangisboomer', nationality='southern water tribe') >>> katara = Driver.objects.create(surname='WaterTribe', name='Katara', username='Katara', password='katara1990', nationality='southern water tribe') >>> toph = Driver.objects.create(surname='Beifong', name='Toph', username='MelonLord', password='qwerty123', nationality='earth kingdom') >>> aang = Driver.objects.create(surname='Avatar', name='Aang', username='TwinkleToes', password='appamomo', nationality='southern air temple') >>> zuko = Driver.objects.create(surname='Firelord', name='Zuko', username='ZukoZuko', password='uncleairo', nationality='fire nation') >>> suki = Driver.objects.create(surname='Kyoshi', name='Suki', username='Warior9000', password='bangbang', nationality='earth kingdom') \u0412\u044b\u0432\u043e\u0434: >>> for d in Driver.objects.all(): d ... <Driver: Sultanov Aladdin> <Driver: Hook James> <Driver: Baby Driver> <Driver: Darkwing Duck> <Driver: Sylvanas Windrunner> <Driver: Mom's friend's Son> <Driver: admin None> <Driver: Myboy DrivingNine> <Driver: Bibovich Boba> <Driver: Whoo Psie> (1) <Driver: WaterTribe Sokka> (2) <Driver: WaterTribe Katara> (3) <Driver: Beifong Toph> (4) <Driver: Avatar Aang> (5) <Driver: Firelord Zuko> (6) <Driver: Kyoshi Suki> \u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 >>> appa = Vehicle.objects.create(number='appa', brand='flying pets', model='sky bison', color='white and brown') >>> fang = Vehicle.objects.create(number='fang', brand='flying pets', model='dragon', color='red') >>> boat = Vehicle.objects.create(number='boatang', brand='boats', model='watertribeboat', color='blue') >>> airship = Vehicle.objects.create(number='boombam', brand='airships', model='metal airship', color='brown') >>> car = Vehicle.objects.create(number='1abc345', brand='ford', model='focus', color='grey') \u0412\u044b\u0432\u043e\u0434: >>> for v in Vehicle.objects.all(): v ... <Vehicle: JR666> <Vehicle: 7M7C7> <Vehicle: A123BC> <Vehicle: A000AA> <Vehicle: 55FIVE> <Vehicle: YE110W> <Vehicle: TUZTUZ> <Vehicle: 12345> <Vehicle: 11111> (1) <Vehicle: appa> (2) <Vehicle: fang> (3) <Vehicle: boatang> (4) <Vehicle: boombam> (5) <Vehicle: 1abc345> \u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> sokkal = Licence.objects.create(driver=sokka, number='111', type='ships', issue_date='1990-01-01T00:00:00+03:00') >>> kataral = Licence.objects.create(driver=katara, number='222', type='any', issue_date='1990-01-01T00:00:00+03:00') >>> tophl = Licence.objects.create(driver=toph, number='333', type='forblind', issue_date='1995-01-01T00:00:00+03:00') >>> aangl = Licence.objects.create(driver=aang, number='444', type='any', issue_date='1800-01-01T00:00:00+03:00') >>> zukol = Licence.objects.create(driver=zuko, number='555', type='any', issue_date='1985-01-01T00:00:00+03:00') >>> sukil = Licence.objects.create(driver=suki, number='666', type='ships', issue_date='1990-01-01T00:00:00+03:00') \u0412\u044b\u0432\u043e\u0434: >>> for l in Licence.objects.all(): l ... <Licence: Licence object (1)> # \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2 <Licence: Licence object (2)> # \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2 <Licence: Licence object (3)> <Licence: Licence object (4)> <Licence: Licence object (5)> <Licence: Licence object (6)> <Licence: Licence object (7)> <Licence: Licence object (8)> \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 >>> Ownership.objects.create(driver=sokka, vehicle=boat, start_date='2010-01-01T00:00:00+03:00', expiry_date='2050-01-01T00:00:00+03:00') <Ownership: WaterTribe Sokka_boatang> >>> Ownership.objects.create(driver=katara, vehicle=boat, start_date='2060-01-01T00:00:00+03:00', expiry_date='2080-01-01T00:00:00+03:00') <Ownership: WaterTribe Katara_boatang> >>> Ownership.objects.create(driver=katara, vehicle=appa, start_date='2010-01-01T00:00:00+03:00', expiry_date='2050-01-01T00:00:00+03:00') <Ownership: WaterTribe Katara_appa> >>> Ownership.objects.create(driver=toph, vehicle=airship, start_date='2010-01-01T00:00:00+03:00', expiry_date='2010-01-01T00:00:01+03:00') <Ownership: Beifong Toph_boombam> >>> Ownership.objects.create(driver=aang, vehicle=appa, start_date='1800-01-01T00:00:00+03:00', expiry_date='2009-01-01T00:00:00+03:00') <Ownership: Avatar Aang_appa> >>> Ownership.objects.create(driver=zuko, vehicle=fang, start_date='2000-01-01T00:00:00+03:00', expiry_date='2080-01-01T00:00:00+03:00') <Ownership: Firelord Zuko_fang> >>> Ownership.objects.create(driver=suki, vehicle=car, start_date='2010-01-01T00:00:00+03:00', expiry_date='2090-01-01T00:00:00+03:00') <Ownership: Kyoshi Suki_1abc345> >>> for o in Ownership.objects.all(): o ... <Ownership: Sultanov Aladdin_7M7C7> <Ownership: Sultanov Aladdin_A123BC> <Ownership: Sultanov Aladdin_A000AA> <Ownership: Hook James_JR666> <Ownership: Hook James_A123BC> <Ownership: Hook James_A123BC> <Ownership: WaterTribe Sokka_boatang> <Ownership: WaterTribe Katara_boatang> <Ownership: WaterTribe Katara_appa> <Ownership: Beifong Toph_boombam> <Ownership: Avatar Aang_appa> <Ownership: Firelord Zuko_fang> <Ownership: Kyoshi Suki_1abc345> \u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: - \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> for v in Vehicle.objects.filter(brand='flying pets'): v ... <Vehicle: appa> <Vehicle: fang> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> for d in Driver.objects.filter(name='Aang'): d ... <Driver: Avatar Aang> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> licence = Licence.objects.get(driver=Driver.objects.order_by('?').first().id) >>> licence.driver <Driver: Kyoshi Suki> >>> licence.number, licence.type ('666', 'ships') \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> for d in Driver.objects.filter(vehicles__color__iexact='red'): d ... <Driver: Firelord Zuko> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> for d in Driver.objects.filter(ownership__start_date__gte='2010-01-01T00:00+03:00'): d ... <Driver: Sultanov Aladdin> <Driver: Hook James> <Driver: WaterTribe Sokka> <Driver: WaterTribe Katara> <Driver: WaterTribe Katara> <Driver: Beifong Toph> <Driver: Kyoshi Suki> \u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: - \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> Licence.objects.aggregate(Min('issue_date')) {'issue_date__min': datetime.datetime(1799, 12, 31, 21, 0, tzinfo=datetime.timezone.utc)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate(Max('expiry_date')) {'expiry_date__max': datetime.datetime(2222, 10, 21, 9, 33, 28, tzinfo=datetime.timezone.utc)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> for n in Ownership.objects.values('driver__username').annotate(Count('vehicle')): n ... {'driver__username': 'Boomerang777', 'vehicle__count': 1} {'driver__username': 'Katara', 'vehicle__count': 2} {'driver__username': 'MelonLord', 'vehicle__count': 1} {'driver__username': 'TwinkleToes', 'vehicle__count': 1} {'driver__username': 'Warior9000', 'vehicle__count': 1} {'driver__username': 'ZukoZuko', 'vehicle__count': 1} {'driver__username': 'aladdin', 'vehicle__count': 3} {'driver__username': 'hook', 'vehicle__count': 3} \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> for b in Vehicle.objects.values('brand').annotate(Count('id')): b ... {'brand': 'Cadillac', 'id__count': 1} {'brand': 'Jolly Roger', 'id__count': 1} {'brand': 'Kia', 'id__count': 1} {'brand': 'MINI', 'id__count': 3} {'brand': 'Magic Carpet LTD', 'id__count': 1} {'brand': 'airships', 'id__count': 1} {'brand': 'boats', 'id__count': 1} {'brand': 'dirigible', 'id__count': 1} {'brand': 'flying pets', 'id__count': 2} {'brand': 'ford', 'id__count': 1} {'brand': '\u0412\u0410\u0417', 'id__count': 1} \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> for d in Licence.objects.order_by('issue_date'): print(d.driver, d.issue_date) ... Avatar Aang 1799-12-31 21:00:00+00:00 Firelord Zuko 1984-12-31 21:00:00+00:00 WaterTribe Sokka 1989-12-31 21:00:00+00:00 WaterTribe Katara 1989-12-31 21:00:00+00:00 Kyoshi Suki 1989-12-31 21:00:00+00:00 WaterTribe Sokka 1990-01-01 00:00:00+00:00 WaterTribe Sokka 1990-01-01 00:00:00+00:00 Beifong Toph 1994-12-31 21:00:00+00:00","title":"Cars"},{"location":"prac3/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1"},{"location":"prac3/#1","text":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1: class Vehicle(models.Model): number = models.CharField(max_length=15) brand = models.CharField(max_length=20) model = models.CharField(max_length=20) color = models.CharField(max_length=30) def __str__(self): return self.number class Driver(AbstractUser): surname = models.CharField(max_length=30, null=True, blank=True) name = models.CharField(max_length=30, null=True, blank=True) birth_date = models.DateTimeField(null=True, blank=True) vehicles = models.ManyToManyField(Vehicle, through='Ownership') passport = models.CharField(max_length=11, null=True, blank=True) address = models.CharField(max_length=200, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) def __str__(self): return f\"{self.surname} {self.name}\" class Licence(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Ownership(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE) start_date = models.DateTimeField() expiry_date = models.DateTimeField() def __str__(self): return \"{}_{}\".format(self.driver.__str__(), self.vehicle.__str__()) \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"prac3/#_1","text":">>> sokka = Driver.objects.create(surname='WaterTribe', name='Sokka', username='Boomerang777', password='aangisboomer', nationality='southern water tribe') >>> katara = Driver.objects.create(surname='WaterTribe', name='Katara', username='Katara', password='katara1990', nationality='southern water tribe') >>> toph = Driver.objects.create(surname='Beifong', name='Toph', username='MelonLord', password='qwerty123', nationality='earth kingdom') >>> aang = Driver.objects.create(surname='Avatar', name='Aang', username='TwinkleToes', password='appamomo', nationality='southern air temple') >>> zuko = Driver.objects.create(surname='Firelord', name='Zuko', username='ZukoZuko', password='uncleairo', nationality='fire nation') >>> suki = Driver.objects.create(surname='Kyoshi', name='Suki', username='Warior9000', password='bangbang', nationality='earth kingdom') \u0412\u044b\u0432\u043e\u0434: >>> for d in Driver.objects.all(): d ... <Driver: Sultanov Aladdin> <Driver: Hook James> <Driver: Baby Driver> <Driver: Darkwing Duck> <Driver: Sylvanas Windrunner> <Driver: Mom's friend's Son> <Driver: admin None> <Driver: Myboy DrivingNine> <Driver: Bibovich Boba> <Driver: Whoo Psie> (1) <Driver: WaterTribe Sokka> (2) <Driver: WaterTribe Katara> (3) <Driver: Beifong Toph> (4) <Driver: Avatar Aang> (5) <Driver: Firelord Zuko> (6) <Driver: Kyoshi Suki>","title":"\u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b"},{"location":"prac3/#_2","text":">>> appa = Vehicle.objects.create(number='appa', brand='flying pets', model='sky bison', color='white and brown') >>> fang = Vehicle.objects.create(number='fang', brand='flying pets', model='dragon', color='red') >>> boat = Vehicle.objects.create(number='boatang', brand='boats', model='watertribeboat', color='blue') >>> airship = Vehicle.objects.create(number='boombam', brand='airships', model='metal airship', color='brown') >>> car = Vehicle.objects.create(number='1abc345', brand='ford', model='focus', color='grey') \u0412\u044b\u0432\u043e\u0434: >>> for v in Vehicle.objects.all(): v ... <Vehicle: JR666> <Vehicle: 7M7C7> <Vehicle: A123BC> <Vehicle: A000AA> <Vehicle: 55FIVE> <Vehicle: YE110W> <Vehicle: TUZTUZ> <Vehicle: 12345> <Vehicle: 11111> (1) <Vehicle: appa> (2) <Vehicle: fang> (3) <Vehicle: boatang> (4) <Vehicle: boombam> (5) <Vehicle: 1abc345>","title":"\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438"},{"location":"prac3/#_3","text":">>> sokkal = Licence.objects.create(driver=sokka, number='111', type='ships', issue_date='1990-01-01T00:00:00+03:00') >>> kataral = Licence.objects.create(driver=katara, number='222', type='any', issue_date='1990-01-01T00:00:00+03:00') >>> tophl = Licence.objects.create(driver=toph, number='333', type='forblind', issue_date='1995-01-01T00:00:00+03:00') >>> aangl = Licence.objects.create(driver=aang, number='444', type='any', issue_date='1800-01-01T00:00:00+03:00') >>> zukol = Licence.objects.create(driver=zuko, number='555', type='any', issue_date='1985-01-01T00:00:00+03:00') >>> sukil = Licence.objects.create(driver=suki, number='666', type='ships', issue_date='1990-01-01T00:00:00+03:00') \u0412\u044b\u0432\u043e\u0434: >>> for l in Licence.objects.all(): l ... <Licence: Licence object (1)> # \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2 <Licence: Licence object (2)> # \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2 <Licence: Licence object (3)> <Licence: Licence object (4)> <Licence: Licence object (5)> <Licence: Licence object (6)> <Licence: Licence object (7)> <Licence: Licence object (8)>","title":"\u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f"},{"location":"prac3/#_4","text":">>> Ownership.objects.create(driver=sokka, vehicle=boat, start_date='2010-01-01T00:00:00+03:00', expiry_date='2050-01-01T00:00:00+03:00') <Ownership: WaterTribe Sokka_boatang> >>> Ownership.objects.create(driver=katara, vehicle=boat, start_date='2060-01-01T00:00:00+03:00', expiry_date='2080-01-01T00:00:00+03:00') <Ownership: WaterTribe Katara_boatang> >>> Ownership.objects.create(driver=katara, vehicle=appa, start_date='2010-01-01T00:00:00+03:00', expiry_date='2050-01-01T00:00:00+03:00') <Ownership: WaterTribe Katara_appa> >>> Ownership.objects.create(driver=toph, vehicle=airship, start_date='2010-01-01T00:00:00+03:00', expiry_date='2010-01-01T00:00:01+03:00') <Ownership: Beifong Toph_boombam> >>> Ownership.objects.create(driver=aang, vehicle=appa, start_date='1800-01-01T00:00:00+03:00', expiry_date='2009-01-01T00:00:00+03:00') <Ownership: Avatar Aang_appa> >>> Ownership.objects.create(driver=zuko, vehicle=fang, start_date='2000-01-01T00:00:00+03:00', expiry_date='2080-01-01T00:00:00+03:00') <Ownership: Firelord Zuko_fang> >>> Ownership.objects.create(driver=suki, vehicle=car, start_date='2010-01-01T00:00:00+03:00', expiry_date='2090-01-01T00:00:00+03:00') <Ownership: Kyoshi Suki_1abc345> >>> for o in Ownership.objects.all(): o ... <Ownership: Sultanov Aladdin_7M7C7> <Ownership: Sultanov Aladdin_A123BC> <Ownership: Sultanov Aladdin_A000AA> <Ownership: Hook James_JR666> <Ownership: Hook James_A123BC> <Ownership: Hook James_A123BC> <Ownership: WaterTribe Sokka_boatang> <Ownership: WaterTribe Katara_boatang> <Ownership: WaterTribe Katara_appa> <Ownership: Beifong Toph_boombam> <Ownership: Avatar Aang_appa> <Ownership: Firelord Zuko_fang> <Ownership: Kyoshi Suki_1abc345>","title":"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435"},{"location":"prac3/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: - \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> for v in Vehicle.objects.filter(brand='flying pets'): v ... <Vehicle: appa> <Vehicle: fang> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> for d in Driver.objects.filter(name='Aang'): d ... <Driver: Avatar Aang> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> licence = Licence.objects.get(driver=Driver.objects.order_by('?').first().id) >>> licence.driver <Driver: Kyoshi Suki> >>> licence.number, licence.type ('666', 'ships') \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> for d in Driver.objects.filter(vehicles__color__iexact='red'): d ... <Driver: Firelord Zuko> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> for d in Driver.objects.filter(ownership__start_date__gte='2010-01-01T00:00+03:00'): d ... <Driver: Sultanov Aladdin> <Driver: Hook James> <Driver: WaterTribe Sokka> <Driver: WaterTribe Katara> <Driver: WaterTribe Katara> <Driver: Beifong Toph> <Driver: Kyoshi Suki>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"prac3/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: - \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> Licence.objects.aggregate(Min('issue_date')) {'issue_date__min': datetime.datetime(1799, 12, 31, 21, 0, tzinfo=datetime.timezone.utc)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate(Max('expiry_date')) {'expiry_date__max': datetime.datetime(2222, 10, 21, 9, 33, 28, tzinfo=datetime.timezone.utc)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> for n in Ownership.objects.values('driver__username').annotate(Count('vehicle')): n ... {'driver__username': 'Boomerang777', 'vehicle__count': 1} {'driver__username': 'Katara', 'vehicle__count': 2} {'driver__username': 'MelonLord', 'vehicle__count': 1} {'driver__username': 'TwinkleToes', 'vehicle__count': 1} {'driver__username': 'Warior9000', 'vehicle__count': 1} {'driver__username': 'ZukoZuko', 'vehicle__count': 1} {'driver__username': 'aladdin', 'vehicle__count': 3} {'driver__username': 'hook', 'vehicle__count': 3} \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> for b in Vehicle.objects.values('brand').annotate(Count('id')): b ... {'brand': 'Cadillac', 'id__count': 1} {'brand': 'Jolly Roger', 'id__count': 1} {'brand': 'Kia', 'id__count': 1} {'brand': 'MINI', 'id__count': 3} {'brand': 'Magic Carpet LTD', 'id__count': 1} {'brand': 'airships', 'id__count': 1} {'brand': 'boats', 'id__count': 1} {'brand': 'dirigible', 'id__count': 1} {'brand': 'flying pets', 'id__count': 2} {'brand': 'ford', 'id__count': 1} {'brand': '\u0412\u0410\u0417', 'id__count': 1} \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> for d in Licence.objects.order_by('issue_date'): print(d.driver, d.issue_date) ... Avatar Aang 1799-12-31 21:00:00+00:00 Firelord Zuko 1984-12-31 21:00:00+00:00 WaterTribe Sokka 1989-12-31 21:00:00+00:00 WaterTribe Katara 1989-12-31 21:00:00+00:00 Kyoshi Suki 1989-12-31 21:00:00+00:00 WaterTribe Sokka 1990-01-01 00:00:00+00:00 WaterTribe Sokka 1990-01-01 00:00:00+00:00 Beifong Toph 1994-12-31 21:00:00+00:00","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"reading/","text":"Add book to the user's shelf URL : /library/reading/{book}/add/ Allow : POST, OPTIONS WWW-Authenticate : Token Example value : { \"review_text\": \"\", \"rate\": null, \"is_read\": false } Update book status on the user's shelf URL : /library/reading/{book}/update/ Allow : PUT, PATCH, OPTIONS WWW-Authenticate : Token Example value : { \"review_text\": \"\", \"rate\": null, \"is_read\": false }","title":"Reading"},{"location":"reading/#add-book-to-the-users-shelf","text":"URL : /library/reading/{book}/add/ Allow : POST, OPTIONS WWW-Authenticate : Token Example value : { \"review_text\": \"\", \"rate\": null, \"is_read\": false }","title":"Add book to the user's shelf"},{"location":"reading/#update-book-status-on-the-users-shelf","text":"URL : /library/reading/{book}/update/ Allow : PUT, PATCH, OPTIONS WWW-Authenticate : Token Example value : { \"review_text\": \"\", \"rate\": null, \"is_read\": false }","title":"Update book status on the user's shelf"}]}